version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: slackclone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  postgres-migrate:
    image: golang:1.20-alpine
    volumes:
      - .:/app
    working_dir: /app
    command: sh -c "apk add --no-cache bash && sleep 10 && go install github.com/pressly/goose/v3/cmd/goose@v3.14.0 && goose -dir sql/schema postgres \"postgres://postgres:postgres123@postgres:5432/slackclone?sslmode=disable\" up"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - GO_ENV=development
      - DATABASE_URL=postgres://postgres:postgres123@postgres:5432/slackclone?sslmode=disable
    depends_on:
      postgres-migrate:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network

  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=slackclone
      - JWT_SECRET=your-super-secret-jwt-key-here
    depends_on:
      postgres-migrate:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
