// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspace_member.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getMemberByWorkspaceIdAndUserId = `-- name: GetMemberByWorkspaceIdAndUserId :one
SELECT id, workspace_id, user_id, status, role, created_at, updated_at, deleted_at FROM workspace_members WHERE workspace_id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetMemberByWorkspaceIdAndUserIdParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) GetMemberByWorkspaceIdAndUserId(ctx context.Context, arg GetMemberByWorkspaceIdAndUserIdParams) (WorkspaceMember, error) {
	row := q.db.QueryRowContext(ctx, getMemberByWorkspaceIdAndUserId, arg.WorkspaceID, arg.UserID)
	var i WorkspaceMember
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Status,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserWorkspaces = `-- name: GetUserWorkspaces :many
SELECT id, workspace_id, user_id, status, role, created_at, updated_at, deleted_at FROM workspace_members WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserWorkspaces(ctx context.Context, userID uuid.UUID) ([]WorkspaceMember, error) {
	rows, err := q.db.QueryContext(ctx, getUserWorkspaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceMember
	for rows.Next() {
		var i WorkspaceMember
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Status,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceMembers = `-- name: GetWorkspaceMembers :many
SELECT id, workspace_id, user_id, status, role, created_at, updated_at, deleted_at FROM workspace_members WHERE workspace_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetWorkspaceMembers(ctx context.Context, workspaceID uuid.UUID) ([]WorkspaceMember, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceMembers, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceMember
	for rows.Next() {
		var i WorkspaceMember
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.UserID,
			&i.Status,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const joinWorkspace = `-- name: JoinWorkspace :one
INSERT INTO workspace_members (
    workspace_id,
    user_id,
    status,
    role
) VALUES (
    $1, $2, $3, $4
) RETURNING id, workspace_id, user_id, status, role, created_at, updated_at, deleted_at
`

type JoinWorkspaceParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
	Status      MemberStatus
	Role        MemberRole
}

func (q *Queries) JoinWorkspace(ctx context.Context, arg JoinWorkspaceParams) (WorkspaceMember, error) {
	row := q.db.QueryRowContext(ctx, joinWorkspace,
		arg.WorkspaceID,
		arg.UserID,
		arg.Status,
		arg.Role,
	)
	var i WorkspaceMember
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.UserID,
		&i.Status,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const leaveWorkspace = `-- name: LeaveWorkspace :exec
UPDATE workspace_members SET deleted_at = CURRENT_TIMESTAMP WHERE workspace_id = $1 AND user_id = $2
`

type LeaveWorkspaceParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) LeaveWorkspace(ctx context.Context, arg LeaveWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, leaveWorkspace, arg.WorkspaceID, arg.UserID)
	return err
}

const updateMemberRole = `-- name: UpdateMemberRole :exec
UPDATE workspace_members SET role = $3 WHERE workspace_id = $1 AND user_id = $2
`

type UpdateMemberRoleParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
	Role        MemberRole
}

func (q *Queries) UpdateMemberRole(ctx context.Context, arg UpdateMemberRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberRole, arg.WorkspaceID, arg.UserID, arg.Role)
	return err
}

const updateMemberStatus = `-- name: UpdateMemberStatus :exec
UPDATE workspace_members SET status = $3 WHERE workspace_id = $1 AND user_id = $2
`

type UpdateMemberStatusParams struct {
	WorkspaceID uuid.UUID
	UserID      uuid.UUID
	Status      MemberStatus
}

func (q *Queries) UpdateMemberStatus(ctx context.Context, arg UpdateMemberStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberStatus, arg.WorkspaceID, arg.UserID, arg.Status)
	return err
}
