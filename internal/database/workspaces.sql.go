// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspaces.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces(
    name,
    username,
    logo,
    member_count,
    user_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, username, logo, member_count, user_id, created_at, updated_at, deleted_at
`

type CreateWorkspaceParams struct {
	Name        string
	Username    string
	Logo        sql.NullString
	MemberCount int32
	UserID      uuid.UUID
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, createWorkspace,
		arg.Name,
		arg.Username,
		arg.Logo,
		arg.MemberCount,
		arg.UserID,
	)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Logo,
		&i.MemberCount,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserJoinedWorkspaces = `-- name: GetUserJoinedWorkspaces :many
SELECT w.id, w.name, w.username, w.logo, w.member_count, w.user_id, w.created_at, w.updated_at, w.deleted_at
FROM workspaces w
INNER JOIN workspace_members wm ON w.id = wm.workspace_id
WHERE wm.user_id = $1 AND wm.status IN ('accepted', 'pending')
AND wm.deleted_at IS NULL
ORDER BY w.created_at DESC
LIMIT $2
OFFSET $3
`

type GetUserJoinedWorkspacesParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserJoinedWorkspaces(ctx context.Context, arg GetUserJoinedWorkspacesParams) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getUserJoinedWorkspaces, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Logo,
			&i.MemberCount,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceById = `-- name: GetWorkspaceById :one
SELECT id, name, username, logo, member_count, user_id, created_at, updated_at, deleted_at FROM workspaces WHERE id = $1
`

func (q *Queries) GetWorkspaceById(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceById, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Logo,
		&i.MemberCount,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspaceByUsername = `-- name: GetWorkspaceByUsername :one
SELECT id, name, username, logo, member_count, user_id, created_at, updated_at, deleted_at FROM workspaces WHERE username = $1
`

func (q *Queries) GetWorkspaceByUsername(ctx context.Context, username string) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByUsername, username)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Logo,
		&i.MemberCount,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getWorkspacesByUserId = `-- name: GetWorkspacesByUserId :many
SELECT id, name, username, logo, member_count, user_id, created_at, updated_at, deleted_at FROM workspaces 
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetWorkspacesByUserIdParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetWorkspacesByUserId(ctx context.Context, arg GetWorkspacesByUserIdParams) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspacesByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Logo,
			&i.MemberCount,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
